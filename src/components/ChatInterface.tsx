import { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Send, Bot, User, Shield, Clock } from "lucide-react";
import DOMPurify from "dompurify";

const ChatInterface = () => {
  const [messages, setMessages] = useState([
    {
      id: 1,
      type: "bot",
      content: "Hello! I'm Campus MindWell, your friendly AI companion. ЁЯдЧ I'm here to chat about anything - from daily stress to mental health support, study tips, or just casual conversation. How are you feeling today? рдореИрдВ рдЖрдкрдХрд╛ рдорд┐рддреНрд░ рд╣реВрдВ, рдЖрдк рдХреИрд╕рд╛ рдорд╣рд╕реВрд╕ рдХрд░ рд░рд╣реЗ рд╣реИрдВ?",
      timestamp: new Date()
    }
  ]);

  const detectLanguage = (text: string): string => {
    const hindiKeywords = ['рдирдорд╕реНрддреЗ', 'рдореИрдВ', 'рд╣реВрдВ', 'рд╣реВрдБ', 'рдХреИрд╕реЗ', 'рдХреНрдпрд╛', 'рдЖрдк', 'рдореБрдЭреЗ', 'рдЪрд┐рдВрддрд╛', 'рддрдирд╛рд╡', 'рдкрд░реЗрд╢рд╛рди', 'рджреБрдЦреА', 'рдЦреБрд╢', 'рдареАрдХ', 'рдЕрдЪреНрдЫрд╛'];
    const bengaliKeywords = ['ржЖржорж┐', 'ржХрзЗржоржи', 'ржЖржЫрж┐', 'ржнрж╛рж▓рзЛ', 'ржЦрж╛рж░рж╛ржк', 'ржЪрж┐ржирзНрждрж╛', 'рж╕ржорж╕рзНржпрж╛'];
    const teluguKeywords = ['р░ир░╛р░Хр▒Б', 'р░Ор░▓р░╛', 'р░Йр░ир▒Нр░ир░╛р░ир▒Б', 'р░мр░╛р░Чр░╛', 'р░Ър▒Жр░бр▒Нр░б', 'р░╕р░ор░╕р▒Нр░п'];
    const tamilKeywords = ['роОройроХрпНроХрпБ', 'роОрокрпНрокроЯро┐', 'роЗро░рпБроХрпНроХро┐ро▒рпЗройрпН', 'роиро▓рпНро▓', 'роХрпЖроЯрпНроЯ', 'рокро┐ро░роЪрпНроЪройрпИ'];
    const gujaratiKeywords = ['ркоркирлЗ', 'ркХрлЗрк╡рлА', 'ркЫрлБркВ', 'рк╕рк╛рк░рлБркВ', 'ркЦрк░рк╛ркм', 'рк╕ркорк╕рлНркпрк╛'];
    const marathiKeywords = ['рдорд▓рд╛', 'рдХрд╕реЗ', 'рдЖрд╣реЗ', 'рдЪрд╛рдВрдЧрд▓реЗ', 'рд╡рд╛рдИрдЯ', 'рд╕рдорд╕реНрдпрд╛'];
    const kannadaKeywords = ['р▓ир▓ир▓Чр│Ж', 'р▓╣р│Зр▓Чр│Ж', 'р▓Зр▓жр│Нр▓жр│Зр▓ир│Ж', 'р▓Тр▓│р│Нр▓│р│Жр▓пр▓жр│Б', 'р▓Хр│Жр▓Яр│Нр▓Яр▓жр│Б'];
    const malayalamKeywords = ['р┤Ор┤ир┤┐р┤Хр╡Нр┤Хр╡Н', 'р┤Ор┤Щр╡Нр┤Щр┤ир╡Ж', 'р┤Йр┤гр╡Нр┤Яр╡Н', 'р┤ир┤▓р╡Нр┤▓р┤др╡Н', 'р┤ор╡Лр┤╢р┤В'];
    const punjabiKeywords = ['риорйИриирйВрй░', 'риХри┐ри╡рйЗриВ', 'ри╣ри╛риВ', 'риЪрй░риЧри╛', 'риори╛рйЬри╛'];
    const urduKeywords = ['┘Е█М┌║', '┌й█М╪│█Т', '█Б┘И┌║', '╪з┌Ж┌╛╪з', '╪и╪▒╪з', '┘╛╪▒█М╪┤╪з┘Ж'];
    
    const lowerText = text.toLowerCase();
    
    if (hindiKeywords.some(keyword => text.includes(keyword) || lowerText.includes(keyword))) return 'hi';
    if (bengaliKeywords.some(keyword => text.includes(keyword))) return 'bn';
    if (teluguKeywords.some(keyword => text.includes(keyword))) return 'te';
    if (tamilKeywords.some(keyword => text.includes(keyword))) return 'ta';
    if (gujaratiKeywords.some(keyword => text.includes(keyword))) return 'gu';
    if (marathiKeywords.some(keyword => text.includes(keyword))) return 'mr';
    if (kannadaKeywords.some(keyword => text.includes(keyword))) return 'kn';
    if (malayalamKeywords.some(keyword => text.includes(keyword))) return 'ml';
    if (punjabiKeywords.some(keyword => text.includes(keyword))) return 'pa';
    if (urduKeywords.some(keyword => text.includes(keyword))) return 'ur';
    
    return 'en';
  };

  const detectTopic = (message: string): 'mental-health' | 'general' => {
    const lowerMessage = message.toLowerCase();
    const mentalHealthKeywords = [
      'anxious', 'anxiety', 'stress', 'depressed', 'sad', 'worried', 'panic',
      'overwhelmed', 'tired', 'sleep', 'insomnia', 'lonely', 'isolated',
      'exam', 'study', 'pressure', 'feeling', 'emotion', 'cope', 'help'
    ];
    
    return mentalHealthKeywords.some(keyword => lowerMessage.includes(keyword)) 
      ? 'mental-health' 
      : 'general';
  };

  const getAIResponse = (userMessage: string): string => {
    const language = detectLanguage(userMessage);
    const topic = detectTopic(userMessage);
    const lowerMessage = userMessage.toLowerCase();
    
    // Crisis detection for Indian context
    const crisisKeywords = [
      'kill myself', 'suicide', 'end it all', 'want to die', 'hurt myself', 'self harm',
      'рдЖрддреНрдорд╣рддреНрдпрд╛', 'рдорд░рдирд╛ рдЪрд╛рд╣рддрд╛', 'рдорд░рдирд╛ рдЪрд╛рд╣рддреА', 'рдЦреБрдж рдХреЛ рдорд╛рд░рдирд╛', 'рдЬреАрдирд╛ рдирд╣реАрдВ рдЪрд╛рд╣рддрд╛',
      'ржорж░рждрзЗ ржЪрж╛ржЗ', 'ржЖрждрзНржорж╣рждрзНржпрж╛', 'р░Ър░╛р░╡р░╛р░▓р░ир░┐', 'р┤Жр┤др╡Нр┤ор┤╣р┤др╡Нр┤п', 'р▓╕р▓╛р▓пр▓мр│Зр▓Хр│Б', 'ркорк░рк╡рлБркВ', 'рдорд░рд╛рдпрдЪреЗ'
    ];
    
    if (crisisKeywords.some(keyword => lowerMessage.includes(keyword) || userMessage.includes(keyword))) {
      return "ЁЯЪи **IMMEDIATE SUPPORT NEEDED** - I'm very concerned about you. Please reach out right now:\n\nЁЯУЮ **iCall**: 9152987821 (24/7)\nЁЯУЮ **AASRA**: 91-9820466726 (24/7)\nЁЯУЮ **Vandrevala Foundation**: 9999 666 555\nЁЯУЮ **Emergency**: 112\n\nЁЯПе Your college counselor is available too. **Reminder: I'm not a doctor. For emergencies, please reach a professional or helpline.** Your life matters deeply.";
    }
    
    if (topic === 'mental-health') {
      const responses = {
        en: "I'm here to listen and support you. Here are some gentle steps that might help:\n\n**Quick Support:**\n1. Take 3 deep breaths right now\n2. Your feelings are completely valid\n3. You're stronger than you think\n4. Consider talking to your college counselor (usually free!)\n\n**Remember:** I'm not a doctor. For serious concerns, please reach a professional or helpline (iCall: 9152987821).\n\nWant to share more about how you're feeling?",
        hi: "рдореИрдВ рдЖрдкрдХреА рдмрд╛рдд рд╕реБрдирдиреЗ рдФрд░ рдЖрдкрдХрд╛ рд╕рд╛рде рджреЗрдиреЗ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдВ рд╣реВрдВред рдпрд╣рд╛рдВ рдХреБрдЫ рд╕рд░рд▓ рдХрджрдо рд╣реИрдВ рдЬреЛ рдорджрдж рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ:\n\n**рддреБрд░рдВрдд рд╕рд╣рд╛рдпрддрд╛:**\n1. рдЕрднреА 3 рдЧрд╣рд░реА рд╕рд╛рдВрд╕реЗрдВ рд▓реЗрдВ\n2. рдЖрдкрдХреА рднрд╛рд╡рдирд╛рдПрдВ рдмрд┐рд▓реНрдХреБрд▓ рд╕рд╣реА рд╣реИрдВ\n3. рдЖрдк рдЕрдкрдиреЗ рд╕реЗ рдХрд╣реАрдВ рдЬреНрдпрд╛рджрд╛ рдордЬрдмреВрдд рд╣реИрдВ\n4. рдЕрдкрдиреЗ рдХреЙрд▓реЗрдЬ рдХрд╛рдЙрдВрд╕рд▓рд░ рд╕реЗ рдмрд╛рдд рдХрд░рдиреЗ рдкрд░ рд╡рд┐рдЪрд╛рд░ рдХрд░реЗрдВ\n\n**рдпрд╛рдж рд░рдЦреЗрдВ:** рдореИрдВ рдбреЙрдХреНрдЯрд░ рдирд╣реАрдВ рд╣реВрдВред рдЧрдВрднреАрд░ рдЪрд┐рдВрддрд╛рдУрдВ рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рдХрд┐рд╕реА рдкреЗрд╢реЗрд╡рд░ рдпрд╛ рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред\n\nрдЖрдк рдХреИрд╕рд╛ рдорд╣рд╕реВрд╕ рдХрд░ рд░рд╣реЗ рд╣реИрдВ, рдФрд░ рдмрддрд╛рдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?",
        bn: "ржЖржорж┐ ржЖржкржирж╛рж░ ржХржерж╛ рж╢рзБржирждрзЗ ржПржмржВ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржПржЦрж╛ржирзЗ ржЖржЫрж┐ред ржПржЦрж╛ржирзЗ ржХрж┐ржЫрзБ рж╕рж╣ржЬ ржкржжржХрзНрж╖рзЗржк ржпрж╛ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рзЗ:\n\n**ржжрзНрж░рзБржд рж╕рж╣рж╛ржпрж╝рждрж╛:**\n1. ржПржЦржиржЗ рзйржЯрж┐ ржЧржнрзАрж░ рж╢рзНржмрж╛рж╕ ржирж┐ржи\n2. ржЖржкржирж╛рж░ ржЕржирзБржнрзВрждрж┐ рж╕ржорзНржкрзВрж░рзНржг ржмрзИржз\n3. ржЖржкржирж┐ ржирж┐ржЬрзЗрж░ ржЪрзЗржпрж╝рзЗ ржЕржирзЗржХ рж╢ржХрзНрждрж┐рж╢рж╛рж▓рзА\n\n**ржоржирзЗ рж░рж╛ржЦржмрзЗржи:** ржЖржорж┐ ржбрж╛ржХрзНрждрж╛рж░ ржиржЗред ржЧрзБрж░рзБрждрж░ рж╕ржорж╕рзНржпрж╛рж░ ржЬржирзНржп ржкрзЗрж╢рж╛ржжрж╛рж░ рж╕рж╛рж╣рж╛ржпрзНржп ржирж┐ржиред",
        te: "р░ир▒Зр░ир▒Б р░ор▒А р░ор░╛р░Я р░╡р░┐р░ир░бр░╛р░ир░┐р░Хр░┐ р░ор░░р░┐р░пр▒Б р░ор▒Ар░Хр▒Б р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░бр░╛р░ир░┐р░Хр░┐ р░Зр░Хр▒Нр░Хр░б р░Йр░ир▒Нр░ир░╛р░ир▒Б:\n\n**р░др▒Нр░╡р░░р░┐р░д р░╕р░╣р░╛р░пр░В:**\n1. р░Зр░кр▒Нр░кр▒Бр░бр▒З 3 р░▓р▒Лр░др▒Ир░и р░╢р▒Нр░╡р░╛р░╕р░▓р▒Б р░др▒Ар░╕р▒Бр░Хр▒Лр░Вр░бр░┐\n2. р░ор▒А р░нр░╛р░╡р░ир░▓р▒Б р░кр▒Вр░░р▒Нр░др░┐р░Чр░╛ р░╕р░░р▒Ир░ир░╡р░┐\n3. р░ор▒Ар░░р▒Б р░Ер░ир▒Бр░Хр▒Бр░ир▒Нр░ир░жр░╛р░ир░┐р░Хр░Вр░Яр▒З р░мр░▓р░Вр░Чр░╛ р░Йр░ир▒Нр░ир░╛р░░р▒Б\n\n**р░Чр▒Бр░░р▒Нр░др▒Бр░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐:** р░ир▒Зр░ир▒Б р░╡р▒Ир░жр▒Нр░пр▒Бр░бр░┐р░ир░┐ р░Хр░╛р░жр▒Бред р░др▒Ар░╡р▒Нр░░р░ор▒Ир░и р░╕р░ор░╕р▒Нр░пр░▓р░Хр▒Б р░╡р▒Ир░жр▒Нр░п р░╕р░╣р░╛р░пр░В р░др▒Ар░╕р▒Бр░Хр▒Лр░Вр░бр░┐ред",
        ta: "роиро╛ройрпН роЙроЩрпНроХро│рпН рокрпЗроЪрпНроЪрпИроХрпН роХрпЗроЯрпНроХ роЗроЩрпНроХрпЗ роЗро░рпБроХрпНроХро┐ро▒рпЗройрпН:\n\n**роЙроЯройроЯро┐ роЙродро╡ро┐:**\n1. роЗрокрпНрокрпЛродрпЗ 3 роЖро┤рооро╛рой роорпВроЪрпНроЪрпБроХро│рпН роОроЯрпБроЩрпНроХро│рпН\n2. роЙроЩрпНроХро│рпН роЙрогро░рпНро╡рпБроХро│рпН роорпБро▒рпНро▒ро┐ро▓рпБроорпН роЪро░ро┐ропро╛ройро╡рпИ\n3. роирпАроЩрпНроХро│рпН роиро┐ройрпИрокрпНрокродрпИ ро╡ро┐роЯ ро╡ро▓ро┐роорпИропро╛ройро╡ро░рпН\n\n**роиро┐ройрпИро╡ро┐ро▓рпН роХрпКро│рпНро│рпБроЩрпНроХро│рпН:** роиро╛ройрпН роЯро╛роХрпНроЯро░рпН роЕро▓рпНро▓ред родрпАро╡ро┐ро░ роХро╡ро▓рпИроХро│рпБроХрпНроХрпБ родрпКро┤ро┐ро▓рпНроорпБро▒рпИ роЙродро╡ро┐ рокрпЖро▒рпБроЩрпНроХро│рпНред"
      };
      
      return responses[language as keyof typeof responses] || responses.en;
    } else {
      const responses = {
        en: [
          "That's interesting! I'm Campus MindWell, and I love chatting about anything. How's college treating you lately?",
          "Thanks for sharing! I'm here for both casual conversations and support when needed. What's on your mind today?",
          "Cool topic! I enjoy connecting with students about all sorts of things. How are you feeling overall?",
          "Nice! As your AI companion, I'm curious about your thoughts. Anything exciting or challenging happening in your life?"
        ],
        hi: [
          "рдпрд╣ рджрд┐рд▓рдЪрд╕реНрдк рд╣реИ! рдореИрдВ Campus MindWell рд╣реВрдВ, рдФрд░ рдореБрдЭреЗ рдХрд┐рд╕реА рднреА рдмрд╛рд░реЗ рдореЗрдВ рдмрд╛рдд рдХрд░рдирд╛ рдЕрдЪреНрдЫрд╛ рд▓рдЧрддрд╛ рд╣реИред рдХреЙрд▓реЗрдЬ рдХреИрд╕рд╛ рдЪрд▓ рд░рд╣рд╛ рд╣реИ?",
          "рд╕рд╛рдЭрд╛ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рдж! рдореИрдВ рдЖрдХрд╕реНрдорд┐рдХ рдмрд╛рддрдЪреАрдд рдФрд░ рдЬрд░реВрд░рдд рдкрдбрд╝рдиреЗ рдкрд░ рд╕рд╣рд╛рдпрддрд╛ рджреЛрдиреЛрдВ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдВ рд╣реВрдВред рдЖрдЬ рдЖрдкрдХреЗ рдорди рдореЗрдВ рдХреНрдпрд╛ рд╣реИ?",
          "рдмрдврд╝рд┐рдпрд╛ рд╡рд┐рд╖рдп! рдореБрдЭреЗ рдЫрд╛рддреНрд░реЛрдВ рд╕реЗ рд╣рд░ рддрд░рд╣ рдХреА рдмрд╛рддреЛрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдмрд╛рдд рдХрд░рдирд╛ рдЕрдЪреНрдЫрд╛ рд▓рдЧрддрд╛ рд╣реИред рдЖрдк рдХреИрд╕рд╛ рдорд╣рд╕реВрд╕ рдХрд░ рд░рд╣реЗ рд╣реИрдВ?"
        ]
      };
      
      const langResponses = responses[language as keyof typeof responses] || responses.en;
      return langResponses[Math.floor(Math.random() * langResponses.length)] + "\n\n**Reminder:** I'm not a doctor. For medical concerns, please consult a professional.";
    }
  };
  const [inputValue, setInputValue] = useState("");

  const quickActions = [
    "How can I manage exam stress?",
    "I'm feeling anxious about my future",
    "Need tips for better sleep",
    "Feeling lonely in college",
    "How to deal with family expectations?",
    "Quick breathing exercise please",
    "рдирдорд╕реНрддреЗ! рдореБрдЭреЗ рдЪрд┐рдВрддрд╛ рд╣реЛ рд░рд╣реА рд╣реИ",
    "ржкрж░рзАржХрзНрж╖рж╛рж░ ржЪрж╛ржк рж╕рж╛ржорж▓рж╛рждрзЗ ржкрж╛рж░ржЫрж┐ ржирж╛",
    "рддрдирд╛рд╡ рдХрдо рдХреИрд╕реЗ рдХрд░реЗрдВ?",
    "р░Хр░╛р░▓р▒Зр░Ьр▒Н р░▓р▒Л р░Тр░Вр░Яр░░р░┐р░Чр░╛ р░Ер░ир░┐р░кр░┐р░╕р▒Нр░др▒Бр░Вр░жр░┐"
  ];

  const handleSendMessage = () => {
    const raw = inputValue;
    const sanitized = DOMPurify.sanitize(raw, { ALLOWED_TAGS: [], ALLOWED_ATTR: [] }).trim();
    if (!sanitized) return;

    const newMessage = {
      id: messages.length + 1,
      type: "user",
      content: sanitized,
      timestamp: new Date()
    };

    setMessages([...messages, newMessage]);
    setInputValue("");

    // Simulate bot response with enhanced AI
    setTimeout(() => {
      const botResponse = {
        id: messages.length + 2,
        type: "bot",
        content: getAIResponse(sanitized),
        timestamp: new Date()
      };
      setMessages(prev => [...prev, botResponse]);
    }, 1000);
  };

  const handleQuickAction = (action: string) => {
    setInputValue(action);
  };

  return (
    <section className="py-20 bg-gradient-soft">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Section Header */}
        <div className="text-center space-y-4 mb-12">
            <h2 className="text-3xl sm:text-4xl font-bold text-foreground">
              Campus MindWell - Your AI Mental Health Companion
            </h2>
            <p className="text-lg text-muted-foreground max-w-2xl mx-auto">
              A friendly AI chat buddy for college students providing mental health support, emotional care, and simple guidance in your preferred language.
            </p>
          
          {/* Privacy Indicators */}
          <div className="flex justify-center gap-6 pt-4">
            <div className="flex items-center gap-2 text-sm text-muted-foreground">
              <Shield className="h-4 w-4 text-primary" />
              <span>End-to-end encrypted</span>
            </div>
            <div className="flex items-center gap-2 text-sm text-muted-foreground">
              <Clock className="h-4 w-4 text-primary" />
              <span>Available 24/7</span>
            </div>
          </div>
        </div>

        {/* Chat Interface */}
        <Card className="shadow-card border border-border/50 overflow-hidden">
          {/* Chat Header */}
          <div className="bg-gradient-hero text-primary-foreground p-4">
            <div className="flex items-center gap-3">
              <div className="w-8 h-8 bg-white/20 rounded-full flex items-center justify-center">
                <Bot className="h-5 w-5" />
              </div>
              <div>
                <h3 className="font-semibold">Campus MindWell</h3>
                <p className="text-xs opacity-90">Your Mental Health Friend тАв Private & Safe</p>
              </div>
              <Badge variant="secondary" className="ml-auto bg-white/20 text-primary-foreground border-white/30">
                Online
              </Badge>
            </div>
          </div>

          {/* Messages */}
          <div className="h-96 overflow-y-auto p-4 space-y-4">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex gap-3 ${
                  message.type === "user" ? "justify-end" : "justify-start"
                }`}
              >
                {message.type === "bot" && (
                  <div className="w-8 h-8 bg-primary-soft rounded-full flex items-center justify-center flex-shrink-0">
                    <Bot className="h-4 w-4 text-primary" />
                  </div>
                )}
                <div
                  className={`max-w-sm p-3 rounded-lg ${
                    message.type === "user"
                      ? "bg-primary text-primary-foreground"
                      : "bg-secondary text-secondary-foreground"
                  }`}
                >
                  <p className="text-sm">{message.content}</p>
                  <span className="text-xs opacity-70 mt-1 block">
                    {message.timestamp.toLocaleTimeString([], { 
                      hour: '2-digit', 
                      minute: '2-digit' 
                    })}
                  </span>
                </div>
                {message.type === "user" && (
                  <div className="w-8 h-8 bg-accent/20 rounded-full flex items-center justify-center flex-shrink-0">
                    <User className="h-4 w-4 text-accent" />
                  </div>
                )}
              </div>
            ))}
          </div>

          {/* Quick Actions */}
          <div className="p-4 border-t border-border">
            <div className="mb-3">
              <p className="text-sm text-muted-foreground mb-2">Quick responses:</p>
              <div className="flex flex-wrap gap-2">
                {quickActions.map((action, index) => (
                  <Button
                    key={index}
                    variant="outline"
                    size="sm"
                    onClick={() => handleQuickAction(action)}
                    className="text-xs"
                  >
                    {action}
                  </Button>
                ))}
              </div>
            </div>

            {/* Message Input */}
            <div className="flex gap-2">
              <Input
                placeholder="Type your message here..."
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                className="flex-1"
              />
              <Button onClick={handleSendMessage} className="px-4">
                <Send className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </Card>

        {/* Enhanced Disclaimer */}
        <div className="text-center text-xs text-muted-foreground mt-6 max-w-3xl mx-auto space-y-2">
          <p className="font-medium">ЁЯЫбя╕П Your Privacy: All chats are confidential and never shared</p>
          <p>тЪХя╕П **Medical Disclaimer**: Campus MindWell provides supportive guidance, not medical advice. For professional help, contact your college counselor.</p>
          <p>ЁЯЪи **Crisis Support**: If you're in immediate danger, call 112 or contact: iCall (9152987821), AASRA (91-9820466726)</p>
        </div>
      </div>
    </section>
  );
};

export default ChatInterface;